{"version":3,"sources":["webpack:///src/app/modules/plcs/container/plc.component.ts","webpack:///src/app/modules/plcs/container/plc.component.html","webpack:///src/app/modules/plcs/plcs.module.ts","webpack:///src/app/modules/plcs/components/connect-plc/connect.component.ts","webpack:///src/app/modules/plcs/components/connect-plc/connect.component.html","webpack:///src/app/shared/animations/index.ts","webpack:///src/app/modules/plcs/models/plc-table.ts","webpack:///src/app/shared/modules/index.ts"],"names":["PlcComponent","store","ws","columns","name","sort_by","descending","property_name","cell_type","actions","type","icon","text","title","plc$","select","state","plcs","show","plcControl","plcSubscription","subscribe","response","dataBackup","length","rows","dispatch","id","map","x","ipAddress","connection","lastStatusChange","hardwareInformation","serialNumber","firmwareNumber","status","sort","a","b","toLowerCase","unsubscribe","event","editData","item","plcEditModal","open","toRemove","filter","removeText","deleteModal","plcModal","plc","edit","data","index","findIndex","find","plcDialog","selector","templateUrl","styles","animations","routes","path","component","PlcsModule","forChild","declarations","imports","ConnectComponent","fb","action","cancel","submitted","plcForm","group","required","pattern","emit","control","result","get","dirty","valid","value","_data","patchValue","submit","onCancel","PlcTable","firmware"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;ACYM;;AAEE;AAAA;;AAAA;;AAAA;;AAAA,mBAAU,WAAV;AAA0B,WAA1B,EAA2B,QAA3B,EAA2B;AAAA;;AAAA;;AAAA;;AAAA;AAAA,mBACG,WADH;AACmB,WAD9C;;AAGF;;;;AAJE;;;;;;;;AASF;;AAGE;AAAA;;AAAA;;AAAA;;AAAA,mBAAU,WAAV;AAA8B,WAA9B,EAA+B,QAA/B,EAA+B;AAAA;;AAAA;;AAAA;;AAAA;AAAA,mBACD,WADC;AACmB,WADlD;;AAGF;;;;;;AALE,iFAAa,MAAb,EAAa,eAAb;;;;;;;;AASF;;AAIE;AAAA;;AAAA;;AAAA;;AAAA,mBAAU,WAAV;AAA6B,WAA7B,EAA8B,QAA9B,EAA8B;AAAA;;AAAA;;AAAA;;AAAA;AAAA,mBACP,WADO;AACY,WAD1C;;AAGF;;;;;;AANE,0FAAsB,MAAtB,EAAsB,iBAAtB,EAAsB,YAAtB,EAAsB,QAAtB;;;;;;;;AASN;;AAIE;AAAA;;AAAA;;AAAA;AAAA;;AACD;;;;;;AAHC,8FAAmB,MAAnB,EAAmB,WAAnB;;;;;;AAMA;;;;AACE,qFAAiB,OAAjB,EAAiB,mBAAjB,EAAiB,MAAjB,EAAiB,gCAAjB;;;;UD9BOA,Y;AA8EX;AACA,8BAAoBC,KAApB,EAAoDC,EAApD,EAA0E;AAAA;;AAAtD,eAAAD,KAAA,GAAAA,KAAA;AAAgC,eAAAC,EAAA,GAAAA,EAAA;AArEpD,eAAAC,OAAA,GAAyB,CACvB;AACEC,gBAAI,EAAE,MADR;AAEEC,mBAAO,EAAE,KAFX;AAGEC,sBAAU,EAAE,IAHd;AAIEC,yBAAa,EAAE,MAJjB;AAKEC,qBAAS,EAAE;AALb,WADuB,EAQvB;AACEJ,gBAAI,EAAE,YADR;AAEEC,mBAAO,EAAE,KAFX;AAGEC,sBAAU,EAAE,IAHd;AAIEC,yBAAa,EAAE,WAJjB;AAKEC,qBAAS,EAAE;AALb,WARuB,EAevB;AACEJ,gBAAI,EAAE,eADR;AAEEC,mBAAO,EAAE,KAFX;AAGEC,sBAAU,EAAE,IAHd;AAIEC,yBAAa,EAAE,cAJjB;AAKEC,qBAAS,EAAE;AALb,WAfuB,EAsBvB;AACEJ,gBAAI,EAAE,UADR;AAEEC,mBAAO,EAAE,KAFX;AAGEC,sBAAU,EAAE,IAHd;AAIEC,yBAAa,EAAE,UAJjB;AAKEC,qBAAS,EAAE;AALb,WAtBuB,EA6BvB;AACEJ,gBAAI,EAAE,QADR;AAEEC,mBAAO,EAAE,KAFX;AAGEC,sBAAU,EAAE,IAHd;AAIEC,yBAAa,EAAE,QAJjB;AAKEC,qBAAS,EAAE;AALb,WA7BuB,EAoCvB;AACEJ,gBAAI,EAAE,oBADR;AAEEC,mBAAO,EAAE,KAFX;AAGEC,sBAAU,EAAE,IAHd;AAIEC,yBAAa,EAAE,kBAJjB;AAKEC,qBAAS,EAAE;AALb,WApCuB,EA2CvB;AACEJ,gBAAI,EAAE,SADR;AAEEC,mBAAO,EAAE,KAFX;AAGEG,qBAAS,EAAE,QAHb;AAIEC,mBAAO,EAAE,CACP;AACEC,kBAAI,EAAE,MADR;AAEEC,kBAAI,EAAE,SAFR;AAGEC,kBAAI,EAAE,MAHR;AAIEC,mBAAK,EAAE;AAJT,aADO,EAOP;AACEH,kBAAI,EAAE,QADR;AAEEC,kBAAI,EAAE,cAFR;AAGEC,kBAAI,EAAE,QAHR;AAIEC,mBAAK,EAAE;AAJT,aAPO;AAJX,WA3CuB,CAAzB;AAsEE,eAAKC,IAAL,GAAY,KAAKb,KAAL,CAAWc,MAAX,CAAkB,UAACC,KAAD;AAAA,mBAAWA,KAAK,CAACC,IAAN,CAAWA,IAAtB;AAAA,WAAlB,CAAZ;AACA,eAAKC,IAAL,GAAY,KAAZ;AACA,eAAKC,UAAL,GAAkB,KAAlB;AACD,S,CAED;;;;;qCACQ;AAAA;;AACN,iBAAKC,eAAL,GAAuB,KAAKN,IAAL,CAAUO,SAAV,CAAoB,UAACC,QAAD,EAAqB;;;AAC9D,mBAAI,CAACC,UAAL,sBAAsBD,QAAtB;AAEA,eAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,GAAQ,MAAR,GAAAA,QAAQ,CAAEE,MAAV,KAAgB,MAAG,KAAI,CAACC,IAAR,MAAY,IAAZ,IAAY,aAAZ,GAAY,MAAZ,GAAY,GAAED,MAA9B,KACE,KAAI,CAACvB,KAAL,CAAWyB,QAAX,CAAoB,IAAI,qDAAJ,CAAyBJ,QAAQ,CAACA,QAAQ,CAACE,MAAT,GAAkB,CAAnB,CAAR,CAA8BG,EAAvD,CAApB,CADF;AAGA,mBAAI,CAACF,IAAL,sBACKH,QAAQ,SAAR,IAAAA,QAAQ,WAAR,GAAQ,MAAR,GAAAA,QAAQ,CAAEM,GAAV,CACD,UAACC,CAAD;AAAA,uBACE,IAAI,0DAAJ,CACEA,CAAC,CAACzB,IADJ,EAEEyB,CAAC,CAACC,SAFJ,EAGED,CAAC,CAACE,UAAF,CAAaC,gBAHf,EAIEH,CAAC,CAACI,mBAAF,CAAsBC,YAJxB,EAKEL,CAAC,CAACI,mBAAF,CAAsBE,cALxB,EAMEN,CAAC,CAACE,UAAF,CAAaK,MANf,CADF;AAAA,eADC,CADL;;AAaA,mBAAI,CAACX,IAAL,CAAUY,IAAV,CAAe,UAACC,CAAD,EAAIC,CAAJ;AAAA,uBAAWA,CAAC,CAACnC,IAAF,CAAOoC,WAAP,KAAuBF,CAAC,CAAClC,IAAF,CAAOoC,WAAP,EAAvB,GAA8C,CAAC,CAA/C,GAAmD,CAA9D;AAAA,eAAf;AACD,aApBsB,CAAvB;AAqBD,W,CAED;;;;wCACc;AACZ,iBAAKpB,eAAL,IAAwB,KAAKA,eAAL,CAAqBqB,WAArB,EAAxB;AACD;;;8CAEmBC,K,EAAuB;AACzC,oBAAQA,KAAK,CAAChC,IAAd;AACE,mBAAK,MAAL;AAAa;AACX,uBAAKiC,QAAL,GAAgB,MAAH,OAAG,CAAH,EAAG,EAAKD,KAAK,CAACE,IAAX,CAAhB;AACA,uBAAKC,YAAL,CAAkBC,IAAlB;AACA;AACD;;AACD,mBAAK,QAAL;AAAe;AACb,uBAAKC,QAAL,GAAgB,MAAH,OAAG,CAAH,EAAG,EACX,KAAKxB,UAAL,CAAgByB,MAAhB,CACD,UAACnB,CAAD;AAAA,2BAAOA,CAAC,CAACzB,IAAF,KAAWsC,KAAK,CAACE,IAAN,CAAWxC,IAAtB,IAA8ByB,CAAC,CAACC,SAAF,KAAgBY,KAAK,CAACE,IAAN,CAAWd,SAAhE;AAAA,mBADC,EAED,CAFC,CADW,CAAhB;AAKA,uBAAKmB,UAAL,0CAAkD,KAAKF,QAAL,CAAc3C,IAAhE;AACA,uBAAK8C,WAAL,CAAiBJ,IAAjB;AACA;AACD;;AACD;AAAS;AACP;AACD;AAlBH;AAoBD;;;sCAEQ;AACP,iBAAKK,QAAL,CAAcL,IAAd;AACD,W,CAED;;;;sCACY;AACV,iBAAK7C,KAAL,CAAWyB,QAAX,CAAoB,IAAI,kDAAJ,CAAsB,KAAKqB,QAAL,CAAcpB,EAApC,CAApB;AACD;;;qCAEUiB,I,EAA0C;;;AACnD,gBAAIQ,GAAJ;;AACA,oBAAQR,IAAI,CAACS,IAAb;AACE,mBAAK,KAAL;AAAY;AACVD,qBAAG,GAAG,IAAI,iDAAJ,CACJ,IADI,EAEJR,IAAI,CAACU,IAAL,CAAUlD,IAFN,EAGJwC,IAAI,CAACU,IAAL,CAAUxB,SAHN,EAIJ;AAAEE,oCAAgB,EAAE,IAApB;AAA0BI,0BAAM,EAAE;AAAlC,mBAJI,EAKJ;AAAEF,gCAAY,EAAE,IAAhB;AAAsBC,kCAAc,EAAE;AAAtC,mBALI,EAMJ,EANI,CAAN;AAQA,uBAAKlC,KAAL,CAAWyB,QAAX,CAAoB,IAAI,kDAAJ,CAAsB0B,GAAtB,CAApB;AACA;AACD;;AACD,mBAAK,IAAL;AAAW;AACT,sBAAMG,KAAK,GAAG,CAAH,KAAG,KAAKhC,UAAL,MAAe,IAAf,IAAe,aAAf,GAAe,MAAf,GAAe,GAAEiC,SAAF,CAC3B,UAAC3B,CAAD;AAAA,2BAAOA,CAAC,CAACzB,IAAF,KAAWwC,IAAI,CAACU,IAAL,CAAUlD,IAArB,IAA6ByB,CAAC,CAACC,SAAF,KAAgBc,IAAI,CAACU,IAAL,CAAUxB,SAA9D;AAAA,mBAD2B,CAA7B;AAGAsB,qBAAG,GAAG,MAAH,OAAG,CAAH,kBAAQ,KAAK7B,UAAL,CAAgBgC,KAAhB,CAAR,CAAG,EAA2B;AAAEnD,wBAAI,EAAEwC,IAAI,CAACU,IAAL,CAAUlD,IAAlB;AAAwB0B,6BAAS,EAAEc,IAAI,CAACU,IAAL,CAAUxB;AAA7C,mBAA3B,CAAN;AACA,uBAAK7B,KAAL,CAAWyB,QAAX,CAAoB,IAAI,kDAAJ,CAAsB0B,GAAtB,CAApB;AAEA,sBAAMK,IAAI,GAAG,KAAKhC,IAAL,CAAUgC,IAAV,CAAe,UAAC5B,CAAD;AAAA,2BAAOA,CAAC,CAACzB,IAAF,KAAWgD,GAAG,CAAChD,IAAf,IAAuByB,CAAC,CAACC,SAAF,KAAgBsB,GAAG,CAACtB,SAAlD;AAAA,mBAAf,CAAb;AACA2B,sBAAI,IAAI,KAAKxD,KAAL,CAAWyB,QAAX,CAAoB,IAAI,qDAAJ,CAAyB0B,GAAG,CAACzB,EAA7B,CAApB,CAAR;AACA;AACD;;AACD;AAAS;AACP;AACD;AA1BH;AA4BD;;;;;;;yBAjLU3B,Y,EAAY,kH,EAAA,4J;AAAA,O;;;cAAZA,Y;AAAY,4B;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;ACrBzB;;AACE;;AACE;;AAGE;AAAA,+BAAsB,KAAtB;AAA6B,iBAAF,KAAE,GAAO,IAAP;AAAa,yBAAA0D,SAAA;AAAW,aAArD;;AAEA;;AACF;;AACF;;AACA;;AACE;;AAQF;;AACA;;AACE;;AAQD;;AACD;;AACE;;AAUF;;AACA;;AAOA;;AAOF;;;;;;AAvDyC;;AAAA;;AASlB;;AAAA;;AAUI;;AAAA;;AAUD;;AAAA;;AAarB;;AAAA,8FAAmB,UAAnB,EAAmB,IAAnB;;;;;;qBDxBS,CAAC,+DAAD;;;;;2HAED1D,Y,EAAY;gBATxB,uDASwB;iBATd;AACT2D,oBAAQ,EAAE,KADD;AAETC,uBAAW,EAAE,sBAFJ;AAGTC,kBAAM,EAAE,CACN,oEADM,EAEN,2DAFM,CAHC;AAOTC,sBAAU,EAAE,CAAC,+DAAD;AAPH,W;AASc,U;;;;;;;AA0EGZ,qBAAW,EAAE,CAAF;kBAApC,uDAAoC;mBAA1B,a;AAA0B,WAAE,C;AAChBC,kBAAQ,EAAE,CAAF;kBAA9B,uDAA8B;mBAApB,U;AAAoB,WAAE,C;AACNN,sBAAY,EAAE,CAAF;kBAAtC,uDAAsC;mBAA5B,c;AAA4B,WAAE;;;;;;;;;;;;;;;;;;;AEjG3C;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAQA,UAAMkB,MAAM,GAAW,CAAC;AAAEC,YAAI,EAAE,EAAR;AAAYC,iBAAS,EAAE;AAAvB,OAAD,CAAvB;;UAMaC,U;;;;;cAAAA;;;;2BAAAA,U;AAAU,S;AAAA,kBAFZ,CAAC,4DAAD,EAAe,yEAAf,EAA6B,kEAA7B,EAAkD,6DAAaC,QAAb,CAAsBJ,MAAtB,CAAlD,CAEY;;;;4HAAVG,U,EAAU;AAAA,yBAHN,qEAGM,EAHQ,0FAGR;AAHwB,oBACnC,4DADmC,EACrB,yEADqB,EACP,kEADO,EACc,4DADd;AAGxB,S;AAFsC,O;;;2HAEhDA,U,EAAU;gBAJtB,sDAIsB;iBAJb;AACRE,wBAAY,EAAE,CAAC,qEAAD,EAAe,0FAAf,CADN;AAERC,mBAAO,EAAE,CAAC,4DAAD,EAAe,yEAAf,EAA6B,kEAA7B,EAAkD,6DAAaF,QAAb,CAAsBJ,MAAtB,CAAlD;AAFD,W;AAIa,U;;;;;;;;;;;;;;;;;;ACdvB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAYaO,gB;AAgBX,kCAAoBC,EAApB,EAAqC;AAAA;;AAAjB,eAAAA,EAAA,GAAAA,EAAA;AATX,eAAAlB,IAAA,GAAO,KAAP;AAMC,eAAAmB,MAAA,GAA4B,IAAI,0DAAJ,EAA5B;AACA,eAAAC,MAAA,GAA4B,IAAI,0DAAJ,EAA5B;AAGR,eAAKC,SAAL,GAAiB,KAAjB;AACA,eAAKC,OAAL,GAAe,KAAKJ,EAAL,CAAQK,KAAR,CAAc;AAC3BxE,gBAAI,EAAE,CAAC,IAAD,EAAO,0DAAWyE,QAAlB,CADqB;AAE3B/C,qBAAS,EAAE,CACT,IADS,EAET,CACE,0DAAW+C,QADb,EAEE,0DAAWC,OAAX,CACE,4FADF,CAFF,CAFS;AAFgB,WAAd,CAAf;AAYD;;;;qCAEU;AACT,iBAAKL,MAAL,CAAYM,IAAZ;AACD;;;qCAEU;AACT,iBAAKP,MAAL,CAAYO,IAAZ;AACD,W,CAED;;;;sCACYC,O,EAAe;AACzB,gBAAIC,MAAJ;AACA,aAAC,KAAKN,OAAL,CAAaO,GAAb,CAAiBF,OAAjB,EAA0BG,KAA1B,IAAoC,KAAKT,SAAL,IAAkB,CAAC,KAAKC,OAAL,CAAaO,GAAb,CAAiBF,OAAjB,EAA0BG,KAAlF,KACA,CAAC,KAAKR,OAAL,CAAaO,GAAb,CAAiBF,OAAjB,EAA0BI,KAD3B,GAEKH,MAAM,GAAG,IAFd,GAGKA,MAAM,GAAG,KAHd;AAIA,mBAAOA,MAAP;AACD;;;mCAEQ;AACP,iBAAKP,SAAL,GAAiB,IAAjB;AACA,iBAAKC,OAAL,CAAaS,KAAb,IAAsB,KAAKZ,MAAL,CAAYO,IAAZ,CAAiB;AAAEzB,kBAAI,EAAE,KAAKqB,OAAL,CAAaU,KAArB;AAA4BhC,kBAAI,EAAE,KAAKA;AAAvC,aAAjB,CAAtB;AACD;;;4BA7CiBC,I,EAAW;AAC3BA,gBAAI,KACA,KAAKgC,KAAL,GAAahC,IAAd,EACD,KAAKqB,OAAL,CAAaY,UAAb,CAAwB;AAAEnF,kBAAI,EAAEkD,IAAI,CAAClD,IAAb;AAAmB0B,uBAAS,EAAEwB,IAAI,CAACxB;AAAnC,aAAxB,CAFE,CAAJ;AAGD;;;;;;;yBAZUwC,gB,EAAgB,2H;AAAA,O;;;cAAhBA,gB;AAAgB,oC;AAAA;AAAA;AAAA;AAAA,S;AAAA;AAAA;AAAA;AAAA,S;AAAA,iB;AAAA,e;AAAA,ylE;AAAA;AAAA;ACZ7B;;AACE;;AACE;;AACE;;AACE;;AACA;;AAAmB;;AAAsD;;AAC3E;;AACA;;AACE;;AAA4B;AAAA,qBAAY,IAAAkB,MAAA,EAAZ;AAAoB,aAApB;;AAC1B;;AACE;;AACE;;AAIG;;AAAQ;;AAA2B;;AAAC;;AAAO;;AAE9C;;AAOF;;AACA;;AACE;;AAIG;;AAAU;;AAA2B;;AAAC;;AAAO;;AAEhD;;AAOF;;AACF;;AACF;;AACF;;AACF;;AACF;;AACF;;AAEA;;AACE;;AACE;;AASE;AAAA,qBAAS,IAAAA,MAAA,EAAT;AAAiB,aAAjB;;AAEA;;AACF;;AACF;;AACA;;AACE;;AAGE;AAAA,qBAAS,IAAAC,QAAA,EAAT;AAAmB,aAAnB;;AAEA;;AACF;;AACF;;AACF;;;;AAnE2B;;AAAA;;AAGb;;AAAA;;AAME;;AAAA;;AAQA;;AAAA;;AAOA;;AAAA;;AAQA;;AAAA;;AAeV;;AAAA;;AAKA;;AAGA;;AAAA;;;;;;;;2HDhDOnB,gB,EAAgB;gBAR5B,uDAQ4B;iBARlB;AACTX,oBAAQ,EAAE,aADD;AAETC,uBAAW,EAAE,0BAFJ;AAGTC,kBAAM,EAAE,CACN,gDADM,EAEN,uCAFM;AAHC,W;AAQkB,U;;;;;AAOlBR,cAAI;kBAAZ;AAAY,Y;AACAC,cAAI;kBAAhB;AAAgB,Y;AAKPkB,gBAAM,EAAE,CAAF;kBAAf;AAAe,WAAE,C;AACRC,gBAAM,EAAE,CAAF;kBAAf;AAAe,WAAE;;;;;;;;;;;;;;;;;;;AE1BpB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;ACCA;AAAA;;;AAAA;AAAA;AAAA;;UAAaiB,Q,GACX,kBACStF,IADT,EAES0B,SAFT,EAGSE,gBAHT,EAISE,YAJT,EAKSyD,QALT,EAMSvD,MANT,EAMuB;AAAA;;AALd,aAAAhC,IAAA,GAAAA,IAAA;AACA,aAAA0B,SAAA,GAAAA,SAAA;AACA,aAAAE,gBAAA,GAAAA,gBAAA;AACA,aAAAE,YAAA,GAAAA,YAAA;AACA,aAAAyD,QAAA,GAAAA,QAAA;AACA,aAAAvD,MAAA,GAAAA,MAAA;AACL,O;;;;;;;;;;;;;;;;;ACTN;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA","file":"modules-plcs-plcs-module-es5.js","sourcesContent":["import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport { PLC } from '@sharedModels';\nimport { TableColumn } from '@sharedModels';\nimport * as actions from '@actions';\nimport { AppState } from '@reducers';\nimport { ConnectData, PlcControl, PlcTable } from '../models/plc-table';\nimport { ModalComponent } from '@sharedModules';\nimport { fadeInFadeOut } from '@sharedAnimations';\nimport { WebsocketService } from 'src/app/shared/websocket/websocket.service';\nimport { WebsocketEnums } from '@sharedEnums';\n@Component({\n  selector: 'plc',\n  templateUrl: './plc.component.html',\n  styles: [\n    '.btn{background-color: #2d3748; margin-top: 0.5rem; outline: none}',\n    '.btn:hover{background-color: #e2e8f0; margin-top: 0.5rem}',\n  ],\n  animations: [fadeInFadeOut],\n})\nexport class PlcComponent implements OnInit, OnDestroy {\n  show: boolean;\n  removeText: string;\n  toRemove: PLC;\n  plc$: Observable<any>;\n  plcSubscription: Subscription;\n  editData: PLC;\n  rows: any[];\n  dataBackup: PLC[];\n  plcControl: PlcControl;\n  columns: TableColumn[] = [\n    {\n      name: 'Name',\n      sort_by: false,\n      descending: true,\n      property_name: 'name',\n      cell_type: 'text',\n    },\n    {\n      name: 'IP Address',\n      sort_by: false,\n      descending: true,\n      property_name: 'ipAddress',\n      cell_type: 'text',\n    },\n    {\n      name: 'Serial Number',\n      sort_by: false,\n      descending: true,\n      property_name: 'serialNumber',\n      cell_type: 'text',\n    },\n    {\n      name: 'Firmware',\n      sort_by: false,\n      descending: true,\n      property_name: 'firmware',\n      cell_type: 'text',\n    },\n    {\n      name: 'Status',\n      sort_by: false,\n      descending: true,\n      property_name: 'status',\n      cell_type: 'status',\n    },\n    {\n      name: 'Last status change',\n      sort_by: false,\n      descending: true,\n      property_name: 'lastStatusChange',\n      cell_type: 'date',\n    },\n    {\n      name: 'Actions',\n      sort_by: false,\n      cell_type: 'action',\n      actions: [\n        {\n          type: 'edit',\n          icon: 'fa-edit',\n          text: 'edit',\n          title: 'Edit',\n        },\n        {\n          type: 'delete',\n          icon: 'fa-trash-alt',\n          text: 'delete',\n          title: 'Delete',\n        },\n      ],\n    },\n  ];\n\n  @ViewChild('deleteModal') deleteModal: ModalComponent;\n  @ViewChild('plcModal') plcModal: ModalComponent;\n  @ViewChild('plcEditModal') plcEditModal: ModalComponent;\n\n  // set necessary variables and select data from store\n  constructor(private store: Store<AppState>, private ws: WebsocketService) {\n    this.plc$ = this.store.select((state) => state.plcs.plcs);\n    this.show = false;\n    this.plcControl = 'new';\n  }\n\n  // sub to store and pass data to components\n  ngOnInit(): void {\n    this.plcSubscription = this.plc$.subscribe((response: PLC[]) => {\n      this.dataBackup = [...response];\n\n      response?.length > this.rows?.length &&\n        this.store.dispatch(new actions.LoadToolsPLC(response[response.length - 1].id));\n\n      this.rows = [\n        ...response?.map(\n          (x) =>\n            new PlcTable(\n              x.name,\n              x.ipAddress,\n              x.connection.lastStatusChange,\n              x.hardwareInformation.serialNumber,\n              x.hardwareInformation.firmwareNumber,\n              x.connection.status\n            )\n        ),\n      ];\n      this.rows.sort((a, b) => (b.name.toLowerCase() > a.name.toLowerCase() ? -1 : 1));\n    });\n  }\n\n  // unsub from store\n  ngOnDestroy() {\n    this.plcSubscription && this.plcSubscription.unsubscribe();\n  }\n\n  tableActionsHandler(event: { type; item }) {\n    switch (event.type) {\n      case 'edit': {\n        this.editData = { ...event.item };\n        this.plcEditModal.open();\n        break;\n      }\n      case 'delete': {\n        this.toRemove = {\n          ...this.dataBackup.filter(\n            (x) => x.name === event.item.name && x.ipAddress === event.item.ipAddress\n          )[0],\n        };\n        this.removeText = `Do you really want to remove ${this.toRemove.name} ?`;\n        this.deleteModal.open();\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n  }\n\n  plcDialog(): void {\n    this.plcModal.open();\n  }\n\n  // call action to delete it from store & BE\n  deletePlc() {\n    this.store.dispatch(new actions.RemovePlc(this.toRemove.id));\n  }\n\n  plcHandler(item: { data: ConnectData; edit: boolean }): void {\n    let plc: PLC;\n    switch (item.edit) {\n      case false: {\n        plc = new PLC(\n          null,\n          item.data.name,\n          item.data.ipAddress,\n          { lastStatusChange: null, status: null },\n          { serialNumber: null, firmwareNumber: null },\n          []\n        );\n        this.store.dispatch(new actions.CreatePlc(plc));\n        break;\n      }\n      case true: {\n        const index = this.dataBackup?.findIndex(\n          (x) => x.name === item.data.name || x.ipAddress === item.data.ipAddress\n        );\n        plc = { ...this.dataBackup[index], name: item.data.name, ipAddress: item.data.ipAddress };\n        this.store.dispatch(new actions.UpdatePlc(plc));\n\n        const find = this.rows.find((x) => x.name === plc.name && x.ipAddress !== plc.ipAddress);\n        find && this.store.dispatch(new actions.LoadToolsPLC(plc.id));\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n  }\n}\n","<div class=\"w-full h-full overflow-y-hidden\">\n  <div class=\"flex flex-row justify-end\" [ngClass]=\"!rows.length && 'bg-gray-100'\">\n    <button\n      class=\"bg-white mx-5 mb-2 hover:text-black hover:bg-gray-100 h-auto rounded text-white font-thin py-2 px-4 border border-gray-400 shadow btn\"\n      routerLink=\"/create-unit\"\n      (click)=\"plcControl = 'new'; show = true; plcDialog()\"\n    >\n      Add PLC\n    </button>\n  </div>\n  <app-modal #plcModal [closeOnOutsideClick]=\"false\">\n    <ng-template #modalBody>\n      <connect-plc\n        [edit]=\"false\"\n        (cancel)=\"plcModal.close()\"\n        (action)=\"plcHandler($event); plcModal.close()\"\n      >\n      </connect-plc>\n    </ng-template>\n  </app-modal>\n  <app-modal #plcEditModal [closeOnOutsideClick]=\"false\">\n    <ng-template #modalBody>\n      <connect-plc\n        [edit]=\"true\"\n        [data]=\"editData\"\n        (cancel)=\"plcEditModal.close()\"\n        (action)=\"plcHandler($event); plcEditModal.close()\"\n      >\n      </connect-plc> </ng-template\n  ></app-modal>\n  <app-modal #deleteModal [closeOnOutsideClick]=\"false\">\n    <ng-template #modalBody>\n      <app-delete-confirmation\n        [title]=\"'Remove plc'\"\n        [text]=\"removeText\"\n        [actionName]=\"'Remove'\"\n        (cancel)=\"deleteModal.close()\"\n        (action)=\"deletePlc(); deleteModal.close()\"\n      >\n      </app-delete-confirmation>\n    </ng-template>\n  </app-modal>\n  <app-table\n    *ngIf=\"rows.length; else noData\"\n    [columns]=\"columns\"\n    [data]=\"rows\"\n    (action)=\"tableActionsHandler($event)\"\n  ></app-table>\n\n  <ng-template #noData>\n    <app-no-data\n      [image]=\"'empty'\"\n      [title]=\"'PLC(s) not found!'\"\n      [text]=\"'Please create at least one PLC'\"\n    ></app-no-data>\n  </ng-template>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PlcComponent } from './container/plc.component';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ConnectComponent } from './components/connect-plc/connect.component';\n\nconst routes: Routes = [{ path: '', component: PlcComponent }];\n\n@NgModule({\n  declarations: [PlcComponent, ConnectComponent],\n  imports: [CommonModule, SharedModule, ReactiveFormsModule, RouterModule.forChild(routes)],\n})\nexport class PlcsModule {}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { PLC } from '@sharedModels';\n\n@Component({\n  selector: 'connect-plc',\n  templateUrl: './connect.component.html',\n  styles: [\n    '.btn{background-color: #2d3748; outline: none}',\n    '.btn:hover{background-color: #e2e8f0}',\n  ],\n})\nexport class ConnectComponent {\n  plcForm: FormGroup;\n  submitted: boolean;\n  btnTxt: string;\n  plcControl: boolean;\n  styleLength: number;\n  _data: PLC;\n  @Input() edit = false;\n  @Input() set data(data: PLC) {\n    data &&\n      ((this._data = data),\n      this.plcForm.patchValue({ name: data.name, ipAddress: data.ipAddress }));\n  }\n  @Output() action: EventEmitter<any> = new EventEmitter();\n  @Output() cancel: EventEmitter<any> = new EventEmitter();\n\n  constructor(private fb: FormBuilder) {\n    this.submitted = false;\n    this.plcForm = this.fb.group({\n      name: [null, Validators.required],\n      ipAddress: [\n        null,\n        [\n          Validators.required,\n          Validators.pattern(\n            '^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n          ),\n        ],\n      ],\n    });\n  }\n\n  onCancel() {\n    this.cancel.emit();\n  }\n\n  onAction() {\n    this.action.emit();\n  }\n\n  // check for erors in form control\n  checkErrors(control: string): boolean {\n    let result: boolean;\n    (this.plcForm.get(control).dirty || (this.submitted && !this.plcForm.get(control).dirty)) &&\n    !this.plcForm.get(control).valid\n      ? (result = true)\n      : (result = false);\n    return result;\n  }\n\n  submit() {\n    this.submitted = true;\n    this.plcForm.valid && this.action.emit({ data: this.plcForm.value, edit: this.edit });\n  }\n}\n","<div class=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4 sm:max-w-lg sm:w-full\">\n  <div class=\"sm:flex sm:items-start\">\n    <div class=\"text-center sm:mt-0 sm:ml-4 sm:text-left\">\n      <h3 class=\"text-lg mt-2 leading-6 font-medium text-gray-700 align-middle\" id=\"modal-headline\">\n        <i class=\"fas fa-robot\"></i>\n        <span class=\"ml-2\">{{ edit ? 'Edit Machine' : 'Connect to new Machine' }}</span>\n      </h3>\n      <div class=\"mt-2\">\n        <form [formGroup]=\"plcForm\" (ngSubmit)=\"submit()\" class=\"w-full\">\n          <div class=\"flex flex-row\">\n            <div class=\"flex flex-col\">\n              <label\n                for=\"name\"\n                class=\"block text-sm font-bold mb-2\"\n                [ngClass]=\"checkErrors('name') ? 'text-red-500' : 'text-gray-700'\"\n                >Plc name<span class=\"text-red-500\">*</span></label\n              >\n              <input\n                id=\"name\"\n                type=\"text\"\n                formControlName=\"name\"\n                class=\"appearance-none block w-40 h-8 bg-gray-200 text-gray-700 disabled:text-gray-500 border rounded py-3 px-4 mb-1 leading-tight focus:outline-none focus:bg-white text-xs\"\n                [ngClass]=\"checkErrors('name') ? 'border-red-500' : 'bg-gray-200'\"\n              />\n            </div>\n            <div class=\"ml-2 flex flex-col\">\n              <label\n                for=\"ip\"\n                class=\"block text-sm font-bold mb-2\"\n                [ngClass]=\"checkErrors('ipAddress') ? 'text-red-500' : 'text-gray-700'\"\n                >IP Address<span class=\"text-red-500\">*</span></label\n              >\n              <input\n                id=\"ip\"\n                type=\"text\"\n                formControlName=\"ipAddress\"\n                class=\"appearance-none block w-40 h-8 bg-gray-200 text-gray-700 disabled:text-gray-500 border rounded py-3 px-4 mb-2 leading-tight focus:outline-none focus:bg-white text-xs\"\n                [ngClass]=\"checkErrors('ipAddress') ? 'border-red-500' : 'bg-gray-200'\"\n              />\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"bg-gray-100 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\n  <span class=\"flex w-full rounded-md shadow-sm sm:ml-3 sm:w-auto\">\n    <button\n      type=\"submit\"\n      class=\"inline-flex justify-center w-full rounded-md border border-transparent px-4 py-2 text-base leading-6 font-medium shadow-sm focus:outline-none transition ease-in-out duration-150 sm:text-sm sm:leading-5\"\n      [ngClass]=\"\n        plcForm.invalid\n          ? 'cursor-not-allowed bg-gray-200 text-gray-400'\n          : 'text-white cursor-pointer btn hover:text-black'\n      \"\n      [attr.disabled]=\"plcForm.invalid ? true : null\"\n      (click)=\"submit()\"\n    >\n      {{ edit ? 'Update' : 'Connect' }}\n    </button>\n  </span>\n  <span class=\"mt-3 flex w-full rounded-md shadow-sm sm:mt-0 sm:w-auto\">\n    <button\n      type=\"button\"\n      class=\"inline-flex justify-center w-full rounded-md border border-gray-300 px-4 py-2 bg-white text-base leading-6 font-medium text-gray-700 shadow-sm focus:outline-none transition ease-in-out duration-150 sm:text-sm sm:leading-5 hover:text-gray-700 hover:font-semibold\"\n      (click)=\"onCancel()\"\n    >\n      Cancel\n    </button>\n  </span>\n</div>\n","export * from './animations';\nexport * from './route-animations';\n","export type PlcControl = 'new' | 'edit';\nexport class PlcTable {\n  constructor(\n    public name: string,\n    public ipAddress: string,\n    public lastStatusChange: Date,\n    public serialNumber: string,\n    public firmware: string,\n    public status: string\n  ) {}\n}\n\nexport interface ConnectData {\n  name: string;\n  ipAddress: string;\n}\n","export * from './modal/container/modal.component';\nexport * from './modal/components/delete/delete.component';\n"]}